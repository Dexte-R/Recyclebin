#!/bin/bash

function getOps() {
	opt_i=false # -i interactive mode
	opt_v=false # -v verbose mode
	opt_r=false # -r recursive mode
	while getopts :ivr opt
	do
		case $opt in
			i)	opt_i=true ;;
			v)	opt_v=true ;;
			r)	opt_r=true ;;
			*)	echo Bad Option - $OPTARG
				exit 5 ;;
		esac
	done
}

function inputIsGiven() {
	# This function checks if user provided input file as argument
	if [[ -z $1 ]]
	then
		echo Please input file name
		exit 1
	fi
}

function fileIsPresent() {
	# This function checks if input file exists in $HOME/recyclebin
	recyclePath="$HOME/recyclebin"
	filePath="$recyclePath/$1"
	if [[ ! -f $filePath ]]
	then
		echo File does not exist in recyclebin
		exit 3
	fi
}

function getOutputPath() {
	# This function reads .restore.info to get absolute path of original file
	inputFileName=$1
	logPath="$HOME/.restore.info"
	inputFileLog=$(grep $inputFileName $logPath)
	if [[ -z $inputFileLog ]]
	then
		echo Unable to retrieve log record of input file from .restore.info
	else
		originalPath=$(echo "$inputFileLog" | cut -d":" -f2)
		dirPath=$(dirname $originalPath)
		fileName=$(basename $originalPath)
	fi
}

function restoreFile() {
	# This function checks if input file already exists in target directory.
	if [[ -f $originalPath ]]
	then
		read -p " Do you want to overwrite? y/n " isOverwrite
	else
		isOverwrite="y"
	fi
	
	case $isOverwrite in
		[yY]*)
			cp $filePath $originalPath
			rm $filePath
			updateLog ;;
		*)
			exit 0 ;;
	esac
}

function isDirPresent() {
	# Checks if dir/sub-dir of file is present, build recursively otherwise
	if [[ ! -d $dirPath ]]
	then
		mkdir -p $dirPath
	fi
}


function updateLog() {
	# This function removes the line containing the info was the restored file.
	grep -v $inputFileName $HOME/.restore.info > .tmpfile
	cp .tmpfile $logPath
}

############	MAIN	#############

getOps $*
shift $((OPTIND - 1))
while [[ $# != 0 ]]
do
	inputIsGiven $*
	fileIsPresent $*
	getOutputPath $*
	if $opt_r
	then
		isDirPresent
		restoreFile
	else
		restoreFile
	fi
	shift
done
exit 0
